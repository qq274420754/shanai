//****************************************
//************ app 壳的配置文件 ************
//****************************************


import com.shanai.buildsrc.*
import org.jetbrains.kotlin.com.intellij.openapi.application.ApplicationInfo

plugins {
    alias(libs.plugins.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.hilt)
    id "kotlin-kapt"
}

android {
    //签名信息定义
    signingConfigs {
        shanai {
            keyAlias 'nuanai'
            keyPassword 'yl821212'
            storeFile file('../nuanai.jks')
            storePassword 'yl821212'
        }
    }

    namespace 'com.shanai'
    compileSdk ProjectBuildConfig.compileSdkVersion

    defaultConfig {
        applicationId ProjectBuildConfig.applicationId
        minSdk ProjectBuildConfig.minSdkVersion
        targetSdk ProjectBuildConfig.targetSdkVersion
        versionCode ProjectBuildConfig.versionCode
        versionName ProjectBuildConfig.versionName

        testInstrumentationRunner DependencyConfig.AndroidX.AndroidJUnitRunner
        multiDexKeepProguard file("multidexKeep.pro")
        flavorDimensions "version"
        ndk {
            // 设置支持的SO库架构
            //abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    // 开启 ViewBinding  dataBinding
    buildFeatures {
        viewBinding = true
        dataBinding  = true
    }
//    signingConfigs {
//        releaseConfig {
//            storeFile file('')
//            storePassword ""
//            keyAlias ""
//            keyPassword ""
//        }
//    }

    buildTypes {
        // 对应 ALPHA 版本
        debug {
            ndk {
                // 需要将 x86 架构过滤掉 ,  "armeabi-v7a"
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.ALPHA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.shanai
        }
        beta {
            ndk {
                // 需要将 x86 架构过滤掉  , "armeabi-v7a" "arm64-v8a"
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.BETA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.shanai
        }
        release {
            ndk {
                // 需要将 x86 架构过滤掉  , "armeabi-v7a" "arm64-v8a"
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.RELEASE}\""
//            signingConfig signingConfigs.releaseConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.shanai
        }
    }

    // 自定义打包apk的文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                outputFileName = "${ProjectBuildConfig.applicationId}" +
                        "_${ProjectBuildConfig.versionCode}" +
                        "(${ProjectBuildConfig.versionName})" +
                        "_${variant.buildType.name}" +
                        ".apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    // 配置多渠道打包
    productFlavors {

        xiaomi {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_xiaomi"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        vivo {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_vivo"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        baidu {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_baidu"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        yingyongbao {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_yingyongbao"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        qihu360 {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_qihu360"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        huawei {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_huawei"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        rongyao {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_rongyao"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }


        meizu {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}h_meizu"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        oppo {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_oppo"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

        guangfang {
            manifestPlaceholders = [CHANNEL: "${defaultConfig.applicationId}_guangfang"]
            resValue "string", "common_appname", "闪爱"
            dimension "version"
        }

    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    if (!ProjectBuildConfig.isAppMode) {
        // 有业务组件时 把这个去掉 这里只是为了使用base里的依赖库
        implementation project(path: ':module_home')
    } else {
        implementation project(path: ':lib_common')
    }
    implementation DependencyConfig.JetPack.HiltCore

    kapt DependencyConfig.GitHub.AutoServiceApt
    kapt DependencyConfig.JetPack.HiltApt
}